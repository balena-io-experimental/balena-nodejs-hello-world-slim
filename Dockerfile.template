FROM balenalib/%%BALENA_MACHINE_NAME%%-node:16-bullseye-run as builder

WORKDIR /usr/src/app

# make folder readable by other users -> _apt can access some deb files otherwise
RUN chmod 777 /usr/src/app

RUN mkdir -p /usr/src/debian-rootfs 

RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -


# list of packages to be installed in rootfs we will use in next stage
ARG PACKAGES="nodejs"

# download all packages and dependencies
RUN apt update && apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances ${PACKAGES} | grep "^\w" | sort -u)

# install packages to separate rootfs
RUN for pkg in *.deb; \
      do dpkg-deb  -x $pkg /usr/src/debian-rootfs; \
      done && rm -rf /usr/src/debian-rootfs/usr/share/doc/*

# install node modules

COPY package*.json ./

# This install npm dependencies on the balena build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm && npm cache verify && rm -rf /tmp/*


FROM busybox:stable


COPY --from=builder /usr/src/debian-rootfs ./

WORKDIR /usr/src/app

COPY --from=builder /usr/src/app/node_modules ./node_modules

# This will copy all files in our root to the working directory in the container
COPY . ./

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV=1

# server.js will run when container starts up on the device
CMD ["sh", "start.sh"]
